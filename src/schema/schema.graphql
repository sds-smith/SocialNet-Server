type Query {
  messages: [Message!]
  coffees: [Coffee!]
  checkins: [Checkin!]
  toasts(checkinId: ID!): [Toast!]
  comments(checkinId: ID!): [Comment!]
}

type Mutation {
  addMessage(text: String!): Message!
  addCheckin(input: CheckinInput!): Checkin
  addCoffee(input: CoffeeInput!): Coffee
  addToast(input: ID!): Toast
  addComment(input: CommentInput!): Comment
}

type Subscription {
  messageAdded: Message
  checkinAdded: Checkin
  coffeeAdded: Coffee
  toastAdded(checkinId: ID!): Toast
  commentAdded(checkinId: ID!): Comment
}

type User {
  displayName: String!
  email: String
  photoURL: String
  uid: String!
}

type Message {
  id: ID!
  user: String!
  text: String!
  createdAt: String
}

type Checkin {
  id: ID!
  user: CheckinUser!
  coffee: Coffee!
  imageUrl: String
  userNotes: String
  createdAt: String!
}

type CheckinUser {
  displayName: String
  email: String
  photoURL: String
}

type Coffee {
  id: ID!
  label: String
  roaster: String
  singleOrigin: Boolean
  origin: String
  roast: String
  process: String
  tastingNotes: String
  description: String
}

type Toast {
  id: ID!
  user: CheckinUser!
  checkinId: ID!
  createdAt: String!
}

type Comment {
  id: ID!
  user: CheckinUser!
  checkinId: ID!
  comment: String!
  createdAt: String!
}

input CheckinInput {
  coffeeID: String!
  imageUrl: String
  userNotes: String
}

input CoffeeInput {
  label: String
  roaster: String
  origin: String
  roast: String
  process: String
  tastingNotes: String
  description: String
}

input CommentInput {
  checkinId: ID!
  comment: String!
}
