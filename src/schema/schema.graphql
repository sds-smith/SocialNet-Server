type Query {
  messages: [Message!]
  checkins: [Checkin!]
}

type Mutation {
  addMessage(text: String!): Message!
  addCheckin(input: CheckinInput!): CheckinResponse
}

type Subscription {
  messageAdded: Message
}

type Message {
  id: ID!
  user: String!
  text: String!
  createdAt: String
}

type Checkin {
  id: ID!
  user: String!
  coffee: Coffee!
  imageUrl: String
  userNotes: String
  createdAt: String!
}

type Coffee {
  label: String
  roaster: String
  singleOrigin: Boolean
  origin: String
  roast: String
  process: String
  tastingNotes: String
  description: String
}

input CheckinInput {
  user: String!
  coffeeID: String!
  imageUrl: String
  userNotes: String
}

type CheckinResponse {
  id: ID!
  user: String!
  coffeeID: String!
  imageUrl: String
  userNotes: String
  createdAt: String!
}
